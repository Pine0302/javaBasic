/**
 * 定义犬科时，发现有些功能不具体（bark，这些布不具体的功能，需要在类中标识出来，通过java中的关键字abstract(抽象)
 * 定义了抽象函数的类也必须被abstract关键字修饰，被abstract关键字修饰的类是抽象类
 * 抽象类：在描述事物时，没有足够的信息描述一个事物，这时该事物就是抽象事务。
 * 
 * 【抽象类的特点】
 * 1.抽象类和抽象方法都需要被abstract修饰，抽象方法一定要定义在抽象类中
 * 2.抽象类不可以创建实例，原因：调用抽象方法没有意义。*
 * 3.只有覆盖了抽象类中所有的抽象方法后，其子类才可以实例化，否则，该子类还是一个抽象类
 * 
 * 之所以继承，更多是在思想，是面对共性类型的操作会更简单
 * 
 * 【细节问题】
 * 1.抽象类一定是个父类？
 * 是的，因为抽象类时不断抽取而来的。
 * 2.抽象类是否有构造函数？
 * 有，虽然不能给自己的对象初始化，但是可以给自己的子类对象初始化
 * 抽象类和一般类的异同点：
 *     相同点
 *          1.他们都是用了描述事物
 *          2.他们之中都可以定义属性和行为
 *     不同点
 *          1.一般类可以描述具体事物，抽象类描述事物的信息不具体
 *          2.抽象类中可以多定义一个成员，抽象函数
 *          3.一般类可以创建对象，抽象类不能创建对象。
 * 3.抽象类中是否可以不定义抽象方法
 * 是可以的。这个抽象类的存在有何意义？仅仅是不然该类创建对象吗？
 * 4.抽象关键字abstract不可以和哪些关键字共存？
 * private:私有方法不能被覆盖，而抽象方法需要被子类覆盖（错误:非法的修饰符组合:abstract和private）
 * static: static 随着类加载而加载，可以被类直接调用，而抽象类中的抽象方法被类调用没有意义（错误: 非法的修饰符组合: abstract和static）
 * final：final修饰完的类没有子类，抽象类有子类(错误: 非法的修饰符组合: abstract和final)
 * 
 * 
 */
abstract class Canidae {
    abstract void bark(); //
}

class Dog extends Canidae {
    void bark() {
        System.out.println("汪汪汪汪");
    }
}

class Wolf extends Canidae {
    void bark() {
        System.out.println("嗷嗷嗷嗷");
    }
}